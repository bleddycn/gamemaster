generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Club {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  brandingJson String?       @db.NVarChar(Max)
  createdAt    DateTime      @default(now())
  members      ClubMember[]
  competitions Competition[]
}

model User {
  id           String             @id @default(cuid())
  email        String             @unique
  name         String?
  passwordHash String?            @db.NVarChar(255)
  role         String             @default("PLAYER") @db.NVarChar(32)
  createdAt    DateTime           @default(now())
  members      ClubMember[]
  entries      CompetitionEntry[]
}

model ClubMember {
  clubId String
  userId String
  role   String @default("PLAYER") @db.NVarChar(32)
  club   Club   @relation(fields: [clubId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([clubId, userId])
  @@index([userId])
}

model GameTemplate {
  id                 String        @id @default(cuid())
  name               String
  // "LMS" for Last Man Standing, etc.
  gameType           String        @db.NVarChar(32)
  sport              String
  status             String        @default("DRAFT") @db.NVarChar(32) // DRAFT | PUBLISHED | ARCHIVED
  // When clubs may activate this template into their tenant
  activationOpenAt   DateTime?
  activationCloseAt  DateTime?
  // Player join window (optional hard dates if you don't want relative offsets)
  joinOpenAt         DateTime?
  joinCloseAt        DateTime?
  // When the game actually starts (e.g., EPL Week 3 kickoff)
  startAt            DateTime
  // Rules/config stored as text JSON
  rulesJson          String?       @db.NVarChar(Max)
  createdAt          DateTime      @default(now())
  competitions       Competition[]

  @@index([status, startAt])
}

model Competition {
  id            String             @id @default(cuid())
  clubId        String
  // Optional link back to the template used to create this competition
  templateId    String?
  name          String
  sport         String
  status        String             @default("DRAFT") @db.NVarChar(32)
  entryFeeCents Int
  currency      String             @default("EUR") @db.NVarChar(8)
  rulesJson     String?            @db.NVarChar(Max)
  startRoundAt  DateTime?
  createdAt     DateTime           @default(now())
  club          Club               @relation(fields: [clubId], references: [id])
  template      GameTemplate?      @relation(fields: [templateId], references: [id])
  entries       CompetitionEntry[]
  rounds        Round[]

  @@index([clubId, status])
  @@index([templateId])
}

model Round {
  id             String      @id @default(cuid())
  competitionId  String
  roundNumber    Int
  pickDeadlineAt DateTime
  status         String      @default("UPCOMING") @db.NVarChar(32)
  fixtures       Fixture[]
  competition    Competition @relation(fields: [competitionId], references: [id])

  @@index([competitionId, roundNumber])
}

model Team {
  id       String  @id @default(cuid())
  leagueId String?
  name     String
  extRef   String?
}

model Fixture {
  id            String   @id @default(cuid())
  competitionId String
  roundId       String
  homeTeamId    String
  awayTeamId    String
  kickoffAt     DateTime
  status        String   @default("SCHEDULED") @db.NVarChar(32)
  result        String?  @db.NVarChar(32)
  round         Round    @relation(fields: [roundId], references: [id])

  @@index([roundId])
}

model CompetitionEntry {
  id              String      @id @default(cuid())
  competitionId   String
  userId          String
  status          String      @default("PENDING") @db.NVarChar(32)
  stripePaymentId String?
  createdAt       DateTime    @default(now())
  competition     Competition @relation(fields: [competitionId], references: [id])
  user            User        @relation(fields: [userId], references: [id])
  picks           Pick[]

  @@unique([competitionId, userId])
}

model Pick {
  id                 String           @id @default(cuid())
  competitionEntryId String
  roundId            String
  teamId             String
  madeAt             DateTime         @default(now())
  status             String           @default("PENDING") @db.NVarChar(32)
  entry              CompetitionEntry @relation(fields: [competitionEntryId], references: [id])

  @@unique([competitionEntryId, roundId])
}
